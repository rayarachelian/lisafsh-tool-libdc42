[[ -z "$CXX"    ]] && export CXX="g++"
[[ -z "$CC"     ]] && export CC="gcc" 
[[ -z "$AR"     ]] && export AR="ar"
[[ -z "$LD"     ]] && export LD="ld"
[[ -z "$AROPTS" ]] && export AROPTS="cru"
[[ -z "$GDB"    ]] && export GDB="$(which lldb)"
[[ -z "$GDB"    ]] && export GDB="$(which gdb)"

export  GCCVER="$($CC --version 2>/dev/null | grep gcc   | head -1 | sed 's/^.* //g' 2>/dev/null)"
export CLANGVER="$($CC --version 2>/dev/null | egrep -i 'llvm|clang' | head -1 | sed 's/^.* //g' 2>/dev/null)"

export GCCCOLORIZED=""
[[ -n "${CLANGVER}"     ]]  && GCCCOLORIZED="-Xclang -fcolor-diagnostics"
[[ "${GCCVER}" > "4.8"  ]]  && GCCCOLORIZED="-fdiagnostics-color=always"

export DARWIN="Darwin"
export MACHINE="$( uname -m )"
# ::TODO:: check 32 bit vs 64 bit for PowerMac G5

export OSVER=$( sw_vers -productVersion        )
export OSMAJOR=$( echo $OSVER | cut -d'.' -f1  )

export MACOSX_MAJOR_VER=$( echo $OSVER | cut -d'.' -f1-2  )

export OSMIDDLE=$( printf "%02d" $( echo $OSVER | cut -d'.' -f2 ))
export BINARYEXTENSION="-${MACHINE}-${OSMAJOR}.$OSMIDDLE"
export MACOSX_VERSION=$( printf "%02d.%02d.%02d" $(echo $OSVER | cut -d'.' -f1) $(echo $OSVER | cut -d'.' -f2) $(echo $OSVER | cut -d'.' -f3) )

export MIN_MACOSX_VERSION="$(  xcodebuild -showsdks 2>/dev/null | grep macosx10 | cut -d'-' -f2 | sed -e 's/sdk macosx//g' | sort -n | head -1 )"
[[ -z "$MIN_MACOSX_VERSION" ]] && export MIN_MACOSX_VERSION="$(basename $(ls -1d $(xcode-select -p )/SDKs/* | grep -i macosx10 | sort -n | head -1 ) | sed -e 's/.sdk$//g' -e 's/[Mm]ac[Oo][Ss][Xx]//g' )"
[[ -z "$MIN_MACOSX_VERSION" ]] && export MIN_MACOSX_VERSION=$( printf "%02d.%d.%d" $(echo $OSVER | cut -d'.' -f1) $(echo $OSVER | cut -d'.' -f2) $(echo $OSVER | cut -d'.' -f3) )

#[[ -n "$MIN_MACOSX_VERSION" ]] && export SDKROOT="$MIN_MACOSX_VERSION"

export HASHOPTS="-b --tag"

export PREFIX="/Applications"
export PREFIXLIB="/Library"

#macos 10.8 w/XCode 4.6.4 does not support many modern options such as
# cc1: error: unrecognized command line option "-Wno-unknown-warning-option"
# cc1: error: unrecognized command line option "-Wno-format-truncation"
# cc1: error: unrecognized command line option "-Wno-duplicate-decl-specifier"
# cc1: error: unrecognized command line option "-Wno-incompatible-pointer-types"
# cc1plus: error: unrecognized command line option -Wno-c++11-extensions 
# cc1plus: error: unrecognized command line option -Wno-deprecated-copy see: 


if [[ "$MACOSX_VERSION" < "10.09" ]]; then
  export NOWARNFORMATTRUNC=""
  export NOUNKNOWNWARNING=""
  export NODUPEDECL=""
  export NOINCOMPATIBLEPTR=""
  export NOCPP11EXT=""
  export NODEPRECATEDCPY=""
  export NOIGNOREDQUALIFIERS=""
  export NOEMPTYBODY=""
else
  export NOUNKNOWNWARNING="-Wno-unknown-warning-option"
fi

# UPX is broken on 10.8 and 10.9.
[[ "$MACOSX_VERSION" > "10.07" ]] && [[ "$MACOSX_VERSION" < "10.10" ]] && UPXCMD=""

# see: https://stackoverflow.com/questions/13219007/xcode-4-5-tr1-type-traits-file-not-found  for 'tr1/type_traits' file not found errors.

export CFLAGS="$CFLAGS -fno-common -fPIC -fwrapv -fno-strict-aliasing -Wno-write-strings -O2 -ffast-math -fomit-frame-pointer -std=c99"
export CXXFLAGS="$CXXFLAGS -fno-common -fPIC -fwrapv -fno-strict-aliasing -Wno-write-strings -O2 -ffast-math -fomit-frame-pointer $NOUNKNOWNWARNING $NOCPP11EXT"

export SYSLIBS=""
# Since we don't want to require the end user have wxWidgets as a dylib preinstalled
# as well as other stuff like libdc42, generator, etc. build a statically linked app
export GCCSTATIC=""

# fix to alow modern XCode/stdc++ clang compilation, see: https://stackoverflow.com/questions/12920891/std-linker-error-with-apple-llvm-4-1
# and https://apple.stackexchange.com/questions/350627/how-can-i-specify-the-c-version-to-use-with-xcode
# wxWidgets may also need patching, see: https://stackoverflow.com/a/37632111

if  [[ "$CLANGVER" ]]; then
    export SYSLIBS="-lstdc++"
   #export SYSLIBS="-lc++"
fi

export AROPTS="cru"

# for some reason if we leave -lstdc++ on some versions, it fails to link and throws loads of errors, but adding .6 works
# even though we see it in the links and it should work, it does not. why? At least on 10.12, I recall seeing this on 10.9
#
# -rwxr-xr-x  1 root  wheel   1.4M Jul 15  2017 /usr/lib/libstdc++.6.0.9.dylib*
# lrwxr-xr-x  1 root  wheel    21B Nov  8  2017 /usr/lib/libstdc++.6.dylib@ -> libstdc++.6.0.9.dylib
# lrwxr-xr-x  1 root  wheel    17B Nov  8  2017 /usr/lib/libstdc++.dylib@ -> libstdc++.6.dylib
#

# if you get "Undefined symbols for architecture x86_64" while linking - Mavericks or another OS, you may need to change this case block to match your Xcode, etc.


case "$MACOSX_VERSION" in
  #10.08.*) CXXFLAGS="$CXXFLAGS -stdlib=libc++"; export SYSLIBS="-lstdc++.6" ;;
  10.09.*)  CXXFLAGS="$CXXFLAGS -stdlib=libc++"; export SYSLIBS="-lstdc++.6" ;;
  10.10.*)  CXXFLAGS="$CXXFLAGS -stdlib=libc++"; export SYSLIBS="-lstdc++.6" ;;
  10.11.*)  CXXFLAGS="$CXXFLAGS -stdlib=libc++"; export SYSLIBS="-lstdc++.6" ;;
esac

# Default 64 bit for MacOS 10.13+ as per Apple's deprecation efforts.
# command line can override this of course.
if [[ "$MACOSX_VERSION" > "10.12" ]]; then
   export SIXTYFOURBITS="--64" 
   export THIRTYTWOBITS=""
   export ARCH="-m64"
fi

export CFLAGS="${CFLAGS} -mmacosx-version-min=${MIN_MACOSX_VERSION}"
export CXXFLAGS="${CXXFLAGS} -mmacosx-version-min=${MIN_MACOSX_VERSION}"

export CLICMD=""
export GUIAPP=""

# Only used on Windows
function windres() {
true 
}

##############################################################################
# getcpus
#
# Gets the number of CPUs available on the machine so we can issue multiple
# compiles simultaneously
#
##############################################################################

function getcpus()
{
  if [[ -z "$NUMCPUS" ]]; then
     export NUMCPUS="$( sysctl -n hw.ncpu )"
  fi
}


##############################################################################
# makelibs
#
# Creates both static and shared libraries.
#
# Parameters $1 target directory
#	     $2 library name
#            $3 version tripplet.  i.e. 0.3.6
#            $4 mode "static", "shared", or "both"
#            $5 is a single string containing objects to merge.
#               i.e. "a.o b.o c.o ..."
#
# i.e.
#            makelibs  . libGenerator 0.3.6 both "lib68k.o cpu68k-?.o"
#
##############################################################################
function makelibs() {

dir="$1"
libname="$2"
ver="$3"
mode="$4"
objs="$5"

aname="${libname}.${ver}.a"
laname="${libname}.a"
daname="${dir}/${aname}"
ldaname="${dir}/${laname}"

soname="${dir}/${libname}.${ver}.so"
lsoname="${dir}/${libname}.so"
ldsoname="${dir}/${libname}.so"
dsoname="${soname}"
dylibname="${dir}/${libname}.${ver}.dylib"
ldylibname="${dir}/${libname}.dylib"
dllname="${dir}/${libname}.${ver}.dll"
ldllname="${dir}/${libname}.dll"

[[ "$4" == "both" ]] && mode="static"


if [[ "$mode" == "static" ]]
then
     echo "  Creating  $libname.a" 1>&2
     $AR "$AROPTS" "${daname}" ${objs} || exit 1
     ranlib ${daname}         || exit 1
     /bin/rm -f       ${ldaname}
     ln -sf ${daname} ${ldaname}
fi


[[ "$4" == "both" ]] && mode="shared"

if [[ "$mode" == "shared" ]]
then

             echo "  Creating  $libname.dylib" 1>&2
             ##nope!##libtool -dynamic -o ${dylibname} $L64 ${objs}           || exit 1
             $CC $ARCH -dynamiclib -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup  \
                 -install_name /usr/local/lib/${dylibname}                                     \
                 -compatibility_version ${ver} -current_version ${ver}                         \
                 -o ${dylibname} ${objs}                                      || exit 1

             /bin/rm -f          ${ldylibname}
             ln -sf ${dylibname} ${ldylibname}                                 

fi

echo -n "" >/dev/null
}
