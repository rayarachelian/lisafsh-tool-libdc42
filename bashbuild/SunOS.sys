echo "This OS has not yet been implemented" 1>&2
exit 1

export PREFIX="/opt/SUNDERNETlisaem/bin"
export PREFIXLIB="/opt/SUNDERNETlisaem/share/"
export AROPTS="cru"

export HASHOPTS="-b --tag"


##############################################################################
# getcpus
#
# Gets the number of CPUs available on the machine so we can issue multiple
# compiles simultaneously
#
# This has now moved to each OS.sys file in bashbuild ::TODO:: remove me
##############################################################################

if ! is_function_defined getcpus; then
function getcpus()
{
  if [[ -z "$NUMCPUS" ]]; then
   case `uname -s` in
     AIX)              NUMCPUS=`lsdev -Ccprocessor | grep -ci available                                              2>/dev/null`  ;;
     Darwin)           #NUMCPUS=`/usr/sbin/ioreg | /usr/bin/egrep -c "+-o CPU.@.*active.*|+-o MacRISC2CPU.*active.*" 2>/dev/null`  # ::TODO:: add check for G4/G5
                       NUMCPUS=`sysctl -n hw.ncpu`                                                                                 ;;
     SunOS)            NUMCPUS=`/usr/sbin/psrinfo  | /usr/bin/grep -ci on-line                                       2>/dev/null`  ;;
     CYGWIN*|Linux)    NUMCPUS=`nproc 2>/dev/null`                                                                                 ;;
     OpenBSD|FreeBSD)  NUMCPUS=`sysctl -n hw.ncpu                                                                    2>/dev/null`  ;;
   esac
   [[ -z "$NUMCPUS" ]] && sysctl hw.ncpu 2>/dev/null| cut -f2 -d:
   NUMCPUS=$(( $NUMCPUS + 0 )) 2>/dev/null  # in case we get a non-numeric, normalize it.
   [[ $NUMCPUS -lt 1 ]] && NUMCPUS=1
  fi

  #too bad there's no simple way to detect hyperthreads vs real cores on the above.

  # normalize to a number, just incase we got passed garbage
  NUMCPUS=`printf "%d\n" "$NUMCPUS" 2>/dev/null`
  # ensure at least 1
  [ $NUMCPUS -lt 1 ] && NUMCPUS=1

  export NUMCPUS
}

fi


##############################################################################
# makelibs
#
# Creates both static and shared libraries.
#
# Parameters $1 target directory
#	     $2 library name
#            $3 version tripplet.  i.e. 0.3.6
#            $4 mode "static", "shared", or "both"
#            $5 is a single string containing objects to merge.
#               i.e. "a.o b.o c.o ..."
#
# i.e.
#            makelibs  . libGenerator 0.3.6 both "lib68k.o cpu68k-?.o"
#
##############################################################################
function makelibs() {

dir="$1"
libname="$2"
ver="$3"
mode="$4"
objs="$5"

aname="${libname}.${ver}.a"
laname="${libname}.a"
daname="${dir}/${aname}"
ldaname="${dir}/${laname}"

soname="${dir}/${libname}.${ver}.so"
lsoname="${dir}/${libname}.so"
ldsoname="${dir}/${libname}.so"
dsoname="${soname}"
dylibname="${dir}/${libname}.${ver}.dylib"
ldylibname="${dir}/${libname}.dylib"
dllname="${dir}/${libname}.${ver}.dll"
ldllname="${dir}/${libname}.dll"

[[ "$4" == "both" ]] && mode="static"


if [[ "$mode" == "static" ]]
then
     echo "  Creating  $libname.a" 1>&2
     $AR "$AROPTS" "${daname}" ${objs} || exit 1
     ranlib ${daname}         || exit 1
     /bin/rm -f       ${ldaname}
     ln -sf ${daname} ${ldaname}
fi


[[ "$4" == "both" ]] && mode="shared"

if [[ "$mode" == "shared" ]]
then

             # not tested yet!
             echo "  Creating  $libname.so" 1>&2
             ld -G -z text -o    ${dsoname} ${objs}   || exit 1
             /bin/rm -f          ${ldsoname}
             ln -sf ${dsoname}   ${ldsoname} 
             echo -n "" >/dev/null
}

export CLICMD=""
export GUIAPP=""

# only used on windows
function windres() {
true 
}

